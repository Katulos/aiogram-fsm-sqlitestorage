[build-system]
requires = ["poetry-core>=1.2.0,<=1.9.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
dynamic = [ "classifiers", "version" ]

[project.urls]
homepage = "https://github.com/Katulos/aiogram-fsm-sqlitestorage"
repository = "https://github.com/Katulos/aiogram-fsm-sqlitestorage"
"Bug Tracker" = "https://github.com/Katulos/aiogram-fsm-sqlitestorage/issues"

[tool.poetry]
name = "aiogram-fsm-sqlitestorage"
version = "0.1.0"
description = "aiogram FSM storage, stores all data in SQLite database."
keywords = ["aiogram", "storage", "sqlite", "fsm"]
authors = [
    "Alex <alex.blednov@gmail.com>", # Original author
    "dimonier <dimonier@gmail.com>", # Original author
]
maintainers = ["Katulos <katulos@protonmail.com>>"]
readme = "README.md"
license = "MIT"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: PyPy",
]
packages = [
    { include = "sqlitestorage"}
]

[tool.poetry.build]
generate-setup-file = false

[tool.poetry.dependencies]
python = ">=3.8"

aiogram = "^3.0.0"

[tool.poetry.group.test.dependencies]
alt-pytest-asyncio = "^0.7.0"
bson = "^0.5.10"
pytest = "^7.3.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.11.2"
pre-commit = "^3.5.0"
ruff = "^0.5.1"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.mypy]
show_error_codes = true
disallow_any_generics = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
namespace_packages = true
explicit_package_bases = true

[tool.ruff]
exclude = ["*.pyi", ".tox", ".git", "venv", ".venv", ".mypy_cache", ".pytest_cache", ".ruff_cache"]
line-length = 78
indent-width = 4
target-version = 'py38'

[tool.ruff.lint]
select = [
    'B',      # flake8-bugbear
    'C4',     # flake8-comprehensions
    'D',      # pydocstyle
    'E',      # pycodestyle (Error)
    'F',      # Pyflakes
    'I',      # isort
    'PYI006', # flake8-pyi
    'RUF100', # unused noqa (auto-fixable)
    'T10',    # flake8-debugger
    'T20',    # flake8-print
    'UP',     # pyupgrade
    'YTT',    # flake8-2020
]

ignore  = [
    #### specific rules
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D205",
    "D211",
    "D213",
    "D401",
    "E203",
    "E266",
    "E501",
    # "F401",
    "F403",
]
fixable = ["A", "B", "C4", "E", "F", "I", "TID"]
unfixable = []
flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
